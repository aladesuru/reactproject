{"version":3,"sources":["components/Navigation.jsx","components/About.jsx","actions/players.js","actiontypes/players.js","components/Stat.jsx","components/Stopwatch.jsx","components/Header.jsx","components/Counter.jsx","components/Player.jsx","components/Addplayer.jsx","components/Content.jsx","components/SourceCode.jsx","App.js","reducers/players.js","registerServiceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","className","es","exact","to","About","addPlayer","name","type","removePlayer","index","updatePlayerScore","score","Stat","props","totalPlayer","totalplayer","length","totalPoint","reduce","total","player","Stopwatch","state","running","elapseTime","previousTime","componentDidMount","_this","interval","setInterval","onTick","componentWillUnmount","clearInterval","onStart","date","Date","now","setState","onStop","onReset","this","stopWatchBtn","onClick","second","Math","floor","Component","Header","components_Stat","players","title","components_Stopwatch","Counter","Player","removePlayers","components_Counter","AddPlayer","nameChange","e","target","value","onSubmit","preventDefault","addplayers","placeholder","onChange","propsTypes","PropTypes","func","isRequired","Content","_this$props","dispatch","bindActionCreators","playerActions","playerComponent","map","components_Player","key","components_Header","Addplayer","defaultProps","connect","Sourcecode","App","components_Navigation","path","component","initialState","arguments","undefined","action","concat","Object","toConsumableArray","slice","objectSpread","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","store","createStore","playerReducer","devToolsExtension","ReactDOM","render","react_redux_es","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6d9b214f.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n\nconst Navigation = () => {\n\treturn(\n\t\t\t<div className=\"nav\">\n\t\t\t\t<nav>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li><NavLink exact to=\"/\">Home</NavLink></li>\n\t\t\t\t\t\t<li><NavLink to=\"/components/About\">About App</NavLink></li>\n\t\t\t\t\t\t<li><NavLink to=\"/components/SourceCode\">Source code</NavLink></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</nav>\n\t\t\t</div>\n\t\t);\n}\n\nexport default Navigation;","import React from 'react';\n\nconst About = () => {\n\treturn(\n\t\t<div className=\"about\">\n\t\t\t<h2> About Application</h2>\n\t\t\t<p>\n\t\t\t\tScore Application is use to track total number of player, total number of point , able to add new player.<br />\n\t\t\t\tAlso has a stopwatch to take turns. Player can be deleted by clicking cross button before the individual player.<br />\n\t\t\t\tYou can also add a player by typing player's name in the textbox and click on add-player button to add player to list.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tPlayer's score can be increase by clicking the PLUS button, and MINUS button to reduced player's score\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tYou can interact with  stopwatch functionality by clicking START button to start and STOP button to pause , also\n\t\t\t\tRESET button to refresh the stopwatch. \n\t\t\t</p>\n\t\t</div>\n\t\t);\n}\n\nexport default About;","import * as PlayersActionTypes from '../actiontypes/players.js';\n\nexport const addPlayer = (name) => {\n    return {\n        type: PlayersActionTypes.ADD_PLAYERS,\n        name\n    }\n};\n\nexport const removePlayer = (index) => {\n    return {\n        type: PlayersActionTypes.REMOVE_PLAYER,\n        index\n    }\n};\n\nexport const updatePlayerScore = (score , index) => {\n    return {\n        type: PlayersActionTypes.UPDATE_PLAYER_SCORE,\n        score,\n        index\n    }\n};","export const ADD_PLAYERS='ADD_PLAYERS';\nexport const REMOVE_PLAYER='REMOVE_PLAYER';\nexport const UPDATE_PLAYER_SCORE='UPDATE_PLAYER_SCORE';","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Stat = (props) => {\n  var totalPlayer = props.totalplayer.length ;\n  var totalPoint = props.totalplayer.reduce((total , player) => {\n    return total + player.score;\n  } , 0);\n\nreturn(\n  <div className=\"totalpoint\">\n    <div>\n      <p>PLAYER: <span> { totalPlayer }</span></p>\n        <p> TOTAL POINT:<span> {totalPoint} </span></p>\n    </div>\n  </div>\n    );\n}\n\nStat.propTypes = {\n  totalplayer: PropTypes.array.isRequired,\n}\n\nexport default Stat;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Stopwatch extends Component\n{\n\tstate ={\n\t\t\trunning : false,\n\t\t\telapseTime : 0,\n\t\t\tpreviousTime : 0\n\t\t}\n\n\t\tcomponentDidMount = () => {\n\t\t\tthis.interval = setInterval(() => this.onTick() , 100);\n\t\t}\n\n\t\tcomponentWillUnmount = () => {\n\t\t\tclearInterval(this.interval);\n\t\t}\n\n\n\t\tonStart = () => {\n\t\t\tlet date = Date.now();\n\t\t\tthis.setState({\n\t\t\t\trunning : true,\n\t\t\t\tpreviousTime : date\n\t\t\t}) ;\n\t\t}\n\n\t\tonStop = () => {\n\t\t\tthis.setState({\n\t\t\t\trunning : false\n\t\t\t});\n\t\t}\n\n\t\t\tonReset = () => {\n\t\t\t\tlet date = Date.now();\n\t\t\tthis.setState({\n\t\t\t\telapseTime : 0,\n\t\t\t\tpreviousTime : date\n\t\t\t});\n\t\t}\n\n\t\tonTick = () => {\n\t\t\tlet date = Date.now();\n\t\t\tif (this.state.running) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\telapseTime : this.state.elapseTime + (date - this.state.previousTime),\n\t\t\t\t\t\tpreviousTime : date\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\trender(){\n\n\t\tif (this.state.running) {\n\t\t\tthis.stopWatchBtn = <button className=\"stop-btn\" onClick ={this.onStop}>STOP</button>\n\t\t} else {\n\t\t\tthis.stopWatchBtn = <button className=\"stop-btn\" onClick ={this.onStart}>START</button>\n\t\t}\n\n\t\tlet second = Math.floor(this.state.elapseTime / 1000);\n\n\t\treturn(\n\t\t\t<div className=\"stopwatch\">\n        <p>STOPWATCH</p>\n        <p><span>{second}</span></p>\n         {this.stopWatchBtn}\n        <button className=\"reset-btn\" onClick={this.onReset}>RESET</button>\n      </div>\n\t\t\t);\n\t}\n}\n\nStopwatch.propTypes = {\n\trunning : PropTypes.string,\n\telapseTime : PropTypes.number,\n\tpreviousTime : PropTypes.number\n}\n\n\nexport default Stopwatch;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Stat from './Stat';\nimport Stopwatch from './Stopwatch';\n\nconst Header = (props) => {\n  return(\n    <div className=\"header\">\n     <Stat totalplayer = { props.players } />\n      <h1> { props.title } </h1>\n        <Stopwatch />\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  players: PropTypes.array.isRequired,\n};\n\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Counter = props => {\n  return(\n  <div className=\"counter-container\">\n    <button onClick = {() => props.updatePlayerScore(-1 , props.index )}>-</button>\n    <span>{props.score}</span>\n    <button onClick = {() => props.updatePlayerScore(1 , props.index) }>+</button>\n  </div>\n  )\n}\n\nCounter.propTypes = {\n  score: PropTypes.number.isRequired,\n  index: PropTypes.number.isRequired,\n  updatePlayerScore:PropTypes.func.isRequired,\n};\n\nexport default Counter;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Counter from './Counter';\n\nconst Player = (props) => {\n  // console.log(props);\n  return(\n    <div className=\"player-container\">\n      <div className=\"player\">\n        <div className=\"player_name\"><span onClick = {() => props.removePlayers(props.index)}>&#10005;</span>{props.name}</div>\n          <div className=\"player_score\">\n            <Counter \n              index={props.index}\n              score={props.score} \n              updatePlayerScore={props.updatePlayerScore}\n              />\n          </div>\n      </div>\n    </div>\n  );\n};\n\nPlayer.propTypes = {\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  index: PropTypes.number.isRequired,\n  updatePlayerScore : PropTypes.func.isRequired,\n  removePlayers: PropTypes.func.isRequired\n};\n\nexport default Player;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddPlayer extends Component{\n  state = {\n    name: \" \",\n  }\n\n  nameChange = (e) => {\n    this.setState ({\n      name: e.target.value,\n    })\n  }\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.props.addplayers(this.state.name);\n    this.setState({ name: \" \"});\n  }\n\n  render(){\n    return (\n      <div className=\"AddPlayerForm\">\n        <form>\n          <input type=\"text\" value={ this.state.name } placeholder=\"Enter Player\"  onChange = { this.nameChange }/>\n          <input type=\"submit\" name=\"submit\" value =\"Add Player\" onClick = { this.onSubmit } />\n        </form>\n    </div>\n    );\n  }\n}\n\nAddPlayer.propsTypes = {\n  addplayers: PropTypes.func.isRequired,\n}\n\nexport default AddPlayer;\n","import React, { Component } from 'react';\nimport {bindActionCreators} from 'redux';\nimport * as playerActions from '../actions/players';\nimport {connect} from 'react-redux';\nimport Header from './Header' ;\nimport Player from './Player' ;\nimport AddPlayer from './Addplayer';\n\nclass Content extends Component {\n  \n  render() {\n    const {dispatch , players}=this.props;\n\n    const addplayers = bindActionCreators(playerActions.addPlayer , dispatch);\n    const removePlayers = bindActionCreators(playerActions.removePlayer , dispatch);\n    const updatePlayerScore = bindActionCreators(playerActions.updatePlayerScore , dispatch);\n\n    const playerComponent = players.map((player , index ) => {\n      return (\n        <Player \n          index={index}\n          name={player.name}\n          score={player.score}\n          key={index}\n          updatePlayerScore={updatePlayerScore}\n          removePlayers={removePlayers}\n        />\n      )\n    })\n\n    return (\n      <div>\n         <Header  title={this.props.title} players={ players } />\n          {\n            playerComponent\n          }\n          <AddPlayer  addplayers={addplayers} />\n      </div>\n    );\n\n  };\n};\n\nContent.defaultProps = {\n    title: \"SCOREBOARD\",\n  };\n\nconst mapStateToProps = state => (\n  {\n    players: state\n  }\n);\n\nexport default connect(mapStateToProps) (Content);","import React from 'react';\n\nconst Sourcecode = () => {\n\treturn(\n\t\t<div className=\"sourcecode\">\n\t\t\t<h2>Application Source Code</h2>\n\t\t\t<p>\n\t\t\t\t<strong>Please visit:</strong>\n\t\t\t</p>\n\t\t\t<p> https://github.com/aladesuru/scoreboard-app</p>\n\t\t</div>\n\t\t);\n}\n\nexport default Sourcecode;","import React from 'react';\nimport { HashRouter , Route  } from 'react-router-dom';\nimport Navigation from './components/Navigation';\nimport About from './components/About';\nimport Content from './components/Content';\nimport Sourcecode from './components/SourceCode';\n\nconst App = () => {\n  return(\n    <HashRouter>\n      <div className=\"App\">\n        <Navigation />\n        {/* <Content /> */}\n        <Route exact path=\"/\" component={ Content }/>\n        <Route  path=\"/components/About\" component={ About } />\n        <Route path=\"/components/SourceCode\" component={ Sourcecode } />\n      </div>\n    </HashRouter>\n    );\n}\n\nexport default App;\n","import * as PlayersActionTypes from '../actiontypes/players.js';\n\nconst initialState =  [ \n    {\n        name: \"Adebola Aladesuru\" ,\n        score: 50,\n    },\n    {\n        name: \"Samuel Olugbemi\" ,\n        score: 60,\n    },\n    {\n        name: \"Kwame Mintah\" ,\n        score: 70,\n    },\n    {\n        name: \"Jordan Southam-Singh\" ,\n        score: 90,\n    },\n    {\n        name: \"Anthony wrigth\" ,\n        score: 40\n    }\n]\n\nconst  players = (state=initialState , action) => {\n    switch(action.type){\n        case PlayersActionTypes.ADD_PLAYERS: \n        return [\n            ...state,\n            {\n                name: action.name,\n                score: 0\n            }\n        ];\n        case PlayersActionTypes.REMOVE_PLAYER:\n        return [\n            ...state.slice(0 , action.index),\n            ...state.slice(action.index + 1)\n        ];\n        case PlayersActionTypes.UPDATE_PLAYER_SCORE:\n        return state.map((player , index) => {\n            if(index === action.index){\n                return {\n                    ...player,\n                    score: player.score + action.score\n                }\n            }\n            return player;\n        });\n\n        default: \n        return state;\n    }\n}\n\nexport default players;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport playerReducer from './reducers/players.js';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst store = createStore(playerReducer ,  window.devToolsExtension && window.devToolsExtension());\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}